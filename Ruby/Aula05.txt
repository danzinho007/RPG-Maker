Aual 05 : Case e Métodos
https://www.youtube.com/watch?v=ksMjJ73TyJM

player_health = 100
caso player_health
when 100
    p "O jogador está com a vida cheia"
when 50
    p "O jogador está com metade da vida"
when 0
    p "O jogador morreu"
elsen
    p "Bugou"
end

Aula 06 : Métodos / Funções
https://www.youtube.com/watch?v=ksMjJ73TyJM

Método 
Será executado quando quiser, basta chamar
Deve passar algum argumento
Pode ser mais de 1 argumento
Deve começar com letras minúsculas 

def say_hello
    p "Hello"
end

Chamando o método :
say_hello

Aula 07 : Métodos e seus argumentos
https://www.youtube.com/watch?v=LigsXRZzNbE

Criando um método com argumento chamado something :

def say(something)
    p something
end

Passando uma variável / valor pro método :
say("Oi, eu sou o Goku")


Criando um método com 2 argumentos :

player1_name = "Erik"
player2_name = "Alex"

def change_player_name (player, new_name)
    if player == "Player 1"
        player1_name = new_name
    else
        player2_name = new_name
    end
end

# Chamando o método e atribuindo valor pro Player 1 : 

change_player_name("Player 1", "Caped Baldy")

# Criando um método com 2 argumentos, porém espeficando o primeiro argumento :

layer1_name = "Erik"
player2_name = "Alex"

def change_player_name (player, new_name = "Caped Baldy")
    if player == "Player 1"
        player1_name = new_name
    else
        player2_name = new_name
    end
end

# Chamando o método apenas usando o argumento : 

change_player_name ("Player 1")


Aula 08 : Return ( Vídeo 6 )
https://www.youtube.com/watch?v=CNfiivRmT8o

Return 
Serve pra sair de um método, ignorando o resto do código

def Hi
    p "Este código será executado"
    return
    p "Esse aqui não"
end

Hi

# Criando um método que verifica se o jogador tem pelo menos 1 carta, caso tenha escreva "É hora do duelo" :

player_cards = 0

def start_battle
    if player_cards <= 0
        return
    else
    p "É hora do duelo"
    end
end

start_battle

Se o jogador : 
tiver menos que 0 carta vai retornar
tiver 0 carta vai retornar
tiver 1 carta vai escrever "É hora do duelo"

# Crie um método que veja a máxima pontuação de um minigame :

def max_minigame_score
    return 100
end

p max_minigame_score

# Criando um método com várias condições : 

player_health = 0
player_lives = 1
enemy_health = 100

def can_call_gameover?
    return false if player_lives > 0
    return false if player_health > 0
    return false if player_health <= 0 && enemy_health <= 0
    return false if enemy_health <= 0
    return true
end

p can_call_gameover

# 1-O número de vidas do jogador é maior que 0 ? Sim, logo vai retornar Falso
# 2- O número de vida do jogador é maior que 0 ? Não, logo vai retornar Falso
# 3.1- O número de vida do jogador é menor ou igual que 0 ? Sim
# 3.2- O número de vida do inimigo é menor ou igual que 0 ? não,
# 3- V e F é Falso
# 4- A vidade do inimigo é menor ou igual que 0 ? Não

p can_call_gameover

Aula 09 : Arrays ( Vìdeo 07 )
https://www.youtube.com/watch?v=EMYRmJkPQH4

Array
Criado pra armazenar vários valores
Cada item dentro de um array é chamado de elemento
Pode alterar qualquer item igual variável

Sendo o array :
array = [10, 20, "Jon Snow"]

Obtendo elemento do array : array[index]
array[0] # 10
array[1] # 20
array[2] # "Jon Snow"

E se colassemos -1, -2 e -3 ?
array[-1] # "Jon Snow"
array[-2] # 20
array[-3] # 10

Alterando elemento do array :

array = [10, 20, "Jon Snow"]
array[0] = "Dez"
p array[0] # "Dez"
